"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountBalanceHistoryInternalSchema = exports.ReOccuringTransactionInternalSchema = exports.TransactionInternalSchema = void 0;
const zod_1 = require("zod");
// TransactionInternal Schema
exports.TransactionInternalSchema = zod_1.z.object({
    AccountId: zod_1.z.string(),
    AccountOwner: zod_1.z.string(),
    Amount: zod_1.z.number(),
    AuthorizedDate: zod_1.z.string(),
    AuthorizedDatetime: zod_1.z.string(),
    CategoryId: zod_1.z.string(),
    CheckNumber: zod_1.z.string().nullable(),
    CurrentDate: zod_1.z.string(),
    CurrentDatetime: zod_1.z.string(),
    ID: zod_1.z.string().uuid(),
    IsoCurrencyCode: zod_1.z.string(),
    LinkId: zod_1.z.number().int(),
    LocationAddress: zod_1.z.string().nullable(),
    LocationCity: zod_1.z.string().nullable(),
    LocationCountry: zod_1.z.string().nullable(),
    LocationLat: zod_1.z.number().nullable(),
    LocationLon: zod_1.z.number().nullable(),
    LocationPostalCode: zod_1.z.string().nullable(),
    LocationRegion: zod_1.z.string().nullable(),
    LocationStoreNumber: zod_1.z.string().nullable(),
    MerchantName: zod_1.z.string(),
    Name: zod_1.z.string(),
    PaymentChannel: zod_1.z.string(),
    PaymentMetaByOrderOf: zod_1.z.string().nullable(),
    PaymentMetaPayee: zod_1.z.string().nullable(),
    PaymentMetaPayer: zod_1.z.string().nullable(),
    PaymentMetaPaymentMethod: zod_1.z.string().nullable(),
    PaymentMetaPaymentProcessor: zod_1.z.string().nullable(),
    PaymentMetaPpdId: zod_1.z.string().nullable(),
    PaymentMetaReason: zod_1.z.string().nullable(),
    PaymentMetaReferenceNumber: zod_1.z.string().nullable(),
    Pending: zod_1.z.boolean(),
    PendingTransactionId: zod_1.z.string().nullable(),
    PersonalFinanceCategoryDetailed: zod_1.z.string(),
    PersonalFinanceCategoryPrimary: zod_1.z.string(),
    Sign: zod_1.z.number().int().min(-1).max(1),
    Time: zod_1.z.date(),
    TransactionCode: zod_1.z.string().nullable(),
    TransactionId: zod_1.z.string(),
    UnofficialCurrencyCode: zod_1.z.string().nullable(),
    UserId: zod_1.z.string().uuid(),
    Categories: zod_1.z.array(zod_1.z.string()),
    ProfileType: zod_1.z.string(),
});
// ReOccuringTransactionInternal Schema
exports.ReOccuringTransactionInternalSchema = zod_1.z.object({
    AccountId: zod_1.z.string(),
    AverageAmount: zod_1.z.string(),
    AverageAmountIsoCurrencyCode: zod_1.z.string(),
    CategoryId: zod_1.z.string(),
    Description: zod_1.z.string(),
    FirstDate: zod_1.z.string(),
    Flow: zod_1.z.string(),
    Frequency: zod_1.z.string(),
    ID: zod_1.z.string().uuid(),
    IsActive: zod_1.z.boolean(),
    LastAmount: zod_1.z.string(),
    LastAmountIsoCurrencyCode: zod_1.z.string(),
    LastDate: zod_1.z.string(),
    LinkId: zod_1.z.number().int(),
    MerchantName: zod_1.z.string(),
    PersonalFinanceCategoryDetailed: zod_1.z.string(),
    PersonalFinanceCategoryPrimary: zod_1.z.string(),
    Sign: zod_1.z.number().int().min(-1).max(1),
    Status: zod_1.z.string(),
    StreamId: zod_1.z.string(),
    Time: zod_1.z.date(),
    TransactionIds: zod_1.z.string(),
    UpdatedTime: zod_1.z.string(),
    UserId: zod_1.z.string().uuid(),
    ProfileType: zod_1.z.string(),
});
// AccountBalanceHistoryInternal Schema
exports.AccountBalanceHistoryInternalSchema = zod_1.z.object({
    Time: zod_1.z.date(),
    AccountId: zod_1.z.string(),
    IsoCurrencyCode: zod_1.z.string(),
    Balance: zod_1.z.number(),
    UserId: zod_1.z.string().uuid(),
    Sign: zod_1.z.number().int().min(-1).max(1),
    Id: zod_1.z.string().uuid(),
    ProfileType: zod_1.z.string(),
});
